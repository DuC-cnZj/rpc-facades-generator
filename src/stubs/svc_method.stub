    /**
{{params}}
     * @param bool $toArray
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return {{return}}|array
     */
    public function {{method}}({{paramFields}}, $toArray = false, $metadata = [], $options = [])
    {
        $input = {{input}};
        $request = $input;
        if (is_array($input)) {
            $request = new {{argument}}();
            foreach($input as $key => $value) {
                $method = 'set' . str_replace(' ', '', ucwords(str_replace(['-', '_'], ' ', $key)));
                if (method_exists($request, $method)) {
                    $request->$method($value);
                }
            }
        }

        $result = array_reduce(
            array_reverse($this->middlewares),
            function ($start, $handler) {
                return function ($metadata) use ($start, $handler) {
                    return $handler($metadata, $start);
                };
            }, function ($metadata) use ($request, $options) {
               return $this->client->{{method}}($request, $metadata, $options)->wait();
            }
        );
        [$data, $response] = $result($metadata);

        if ($response->code == \Grpc\CALL_OK) {
            if ($toArray) {
                return json_decode($data->serializeToJsonString(), true);
            }

            return $data;
        }

        throw new \Exception("{{svc}} rpc client error: " . $response->details, $response->code);
    }
