    /**
{{params}}
     * @param bool $asArray
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return {{return}}|array
     */
    public function {{method}}({{paramFields}}, $asArray = true, $metadata = [], $options = [])
    {
        $input = {{input}};
        $request = $input;
        if (is_array($input)) {
            $request = new {{argument}}();
            foreach($input as $key => $value) {
                $method = 'set' . str_replace(' ', '', ucwords(str_replace(['-', '_'], ' ', $key)));
                if (method_exists($request, $method)) {
                    $request->$method($value);
                }
            }
        }
        // TODO 不写死
        if (isset($_SERVER['UBER-TRACE-ID'])) {
            $metadata['UBER-TRACE-ID'] = [$_SERVER['UBER-TRACE-ID']];
        }
        $metadata["UID"] = [(string)auth()->id()];
        [$data, $response] = $this->client->{{method}}($request, $metadata, $options)->wait();
        if ($response->code == \Grpc\CALL_OK) {
            if ($asArray) {
                return json_decode($data->serializeToJsonString(), true);
            }

            return $data;
        }

        throw new \Exception("{{svc}} rpc client error: " . $response->details, $response->code);
    }
